<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects | Michaël Karpe</title>
    <link>https://michaelkarpe.github.io/machine-learning-projects/</link>
      <atom:link href="https://michaelkarpe.github.io/machine-learning-projects/index.xml" rel="self" type="application/rss+xml" />
    <description>Projects</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 15 Jun 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://michaelkarpe.github.io/media/icon_hu942ec82bbfdd4b8fc9bf90d8cd76fd06_20106_512x512_fill_lanczos_center_3.png</url>
      <title>Projects</title>
      <link>https://michaelkarpe.github.io/machine-learning-projects/</link>
    </image>
    
    <item>
      <title>Stochastic Dual Coordinate Ascent</title>
      <link>https://michaelkarpe.github.io/machine-learning-projects/sdca/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://michaelkarpe.github.io/machine-learning-projects/sdca/</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;In machine learning, the process of fitting a model to the data requires to solve an optimization problem.
The difficulty resides in the fact that this optimization quickly becomes very complex when dealing with real problems.
The Stochastic Gradient Descent (SGD) is a very popular algorithm to solve those problems because it has good convergence guaranties.
Yet, the SGD does not have a good stopping criteria, and its solutions are often not accurate enough.&lt;/p&gt;
&lt;p&gt;The Stochastic Dual Coordinate Ascent (SDCA) tries to solve the optimization problem by solving its dual problem.
Instead of optimizing the weights, we optimize a dual variable from which we can compute the weights and thus solve the former.
This method can give good results for specific problems : for instance, solving the dual problem of the SVM has proven to be effective and to give interesting results, with a linear convergence in some cases.&lt;/p&gt;
&lt;p&gt;In this report, we compile the key theoretical points necessary to have a global understanding of the SDCA.
First we introduce the SDCA and its principles.
We then present the machine learning problem our report focuses on, and we study computational performances of the method by trying to apply SDCA on concrete problems. Finally we conclude on SDCA strengths and weaknesses.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;purpose-of-the-report-a-new-sgd-like-method&#34;&gt;Purpose of the report: a new SGD-like method&lt;/h1&gt;
&lt;h2 id=&#34;difference-between-sgd-and-sdca&#34;&gt;Difference between SGD and SDCA&lt;/h2&gt;
&lt;p&gt;A simple approach for solving Support Vector Machine learning is Stochastic Gradient Descent (SGD).
SGD finds an $\epsilon_P$-sub-optimal solution in time $O(1/(\lambda \epsilon_P))$.
We say that a solution $w$ is $\epsilon_P$-sub-optimal if $P(w) - P(w^{*}) \leq \epsilon_P$, where $P$ is the objective function of the primal problem.
This runtime does not depend on $n$ and therefore is favorable when $n$ is very large.
However, as explained in the studied articles, the SGD approach has several disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it does not have a clear stopping criterion&lt;/li&gt;
&lt;li&gt;it tends to be too aggressive at the beginning of the optimization process, especially when $\lambda$ is very small&lt;/li&gt;
&lt;li&gt;while SGD reaches a moderate accuracy quite fast, its convergence becomes rather slow when we are interested in more accurate solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, an alternative approach is Dual Coordinate Ascent (DCA), which solves the dual problem instead of the primal problem.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;formulation-of-sdca-optimization-problem&#34;&gt;Formulation of SDCA optimization problem&lt;/h2&gt;
&lt;p&gt;Let $x_1, \dots, x_n \in \mathbb{R}^d$, $\phi_1, \dots, \phi_n$ scalar convex functions, $\lambda &amp;gt; 0$ regularization parameter. Let us focus on the following optimization problem:&lt;/p&gt;
&lt;p&gt;$$\min_{w \in \mathbb{R}^d} P(w) = \left[ \dfrac{1}{n} \sum_{i=1}^n \phi_i(w^\top x_i) + \dfrac{\lambda}{2}||w||^2 \right]$$&lt;/p&gt;
&lt;p&gt;with solution $w^{*} = \arg \min_{w \in \mathbb{R}^d} P(w)$.&lt;/p&gt;
&lt;p&gt;Moreover, we say that a solution $w$ is $\epsilon_P$-sub-optimal if $P(w) - P(w^{*}) \leq \epsilon_P$. We analyze here the required runtime to find an $\epsilon_P$-sub-optimal solution using SDCA.&lt;/p&gt;
&lt;p&gt;Let $\phi_i^{*} : \mathbb{R} \rightarrow \mathbb{R}$ be the convex conjugate of $\phi_i$ : $\phi_i^{*}(u) = \max_z (zu-\phi_i(z))$. The dual problem of &amp;hellip; is defined as follows:&lt;/p&gt;
&lt;p&gt;$$\max_{\alpha \in \mathbb{R}^n} D(\alpha) = \dfrac{1}{n} \sum_{i=1}^n -\phi_i^{*}(-\alpha_i) - \dfrac{\lambda}{2}||\dfrac{1}{\lambda n}\sum_{i=1}^n \alpha_ix_i||^2$$&lt;/p&gt;
&lt;p&gt;with solution $\alpha^{*} = \arg \max_{a \in \mathbb{R}^n} D(\alpha)$.&lt;/p&gt;
&lt;p&gt;Moreover, if we define $w(\alpha) = \frac{1}{\lambda n} \sum_{i=1}^n \alpha_ix_i$, thanks to classic optimization results, we then have:&lt;/p&gt;
&lt;p&gt;$$w(\alpha^{*}) = w^{*}$$&lt;/p&gt;
&lt;p&gt;$$P(w^{*}) = D(\alpha^{*})$$&lt;/p&gt;
&lt;p&gt;We also define the duality gap as $P(w(\alpha)) - D(\alpha)$. The SDCA procedure is described in Section 1.4.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;focus-on-the-logistic-regression&#34;&gt;Focus on the logistic regression&lt;/h2&gt;
&lt;p&gt;In order to fully grasp the method behind the first paper, let&amp;rsquo;s take an example with the logistic regression. We will consider logistic regression only for binary classification. We use the following usual notations : $X \in \mathbf{X} = \mathbb{R}^p$ the random variable for the description space, and $Y \in \mathbf{Y} = \{-1, 1\}$ the random variable for the label. We recall that the model is the following :&lt;/p&gt;
&lt;p&gt;$$\frac{\mathbb{P}(y=1 | X=x)}{\mathbb{P}(y=-1 |X=x)} = w^\top x, \quad w \in \mathbb{R}^p$$&lt;/p&gt;
&lt;p&gt;We want to find $w$ such that it maximizes the likelihood, or log-likelihood, with a term of regularization:&lt;/p&gt;
&lt;p&gt;$$\min_w C \sum_i \log\left(1 + e^{-y_iw^\top x_i}\right)  + \frac{1}{2} w^\top w$$&lt;/p&gt;
&lt;p&gt;In order to get the dual problem, we rewrite it with an artificial constraint $z_i = y_iw^Tx_i$, and we have the following Lagrangian :&lt;/p&gt;
&lt;p&gt;$$\mathcal{L}(w, z, \alpha) = \sum_i (C \log\left(1+z_i\right) + \alpha_i z_i) - \sum_i \alpha_i e^{-z_i} + \frac{1}{2}w^\top w$$&lt;/p&gt;
&lt;p&gt;We will note $w^* = \sum_i \alpha_i y_i x_i$ and $z^*$ the variables solution of the optimization problem&lt;/p&gt;
&lt;p&gt;$$\min_{w, z} \mathcal{L}(w, z, \alpha) = \mathcal{L}(w^&lt;em&gt;, z^&lt;/em&gt;, \alpha) = \psi(\alpha)$$&lt;/p&gt;
&lt;p&gt;In fact, it leads to the following dual problem :&lt;/p&gt;
&lt;p&gt;$$\max_{\alpha} \sum_{i \in I} (-\alpha_i \log(\alpha_i) - (C-\alpha_i) \log(C - \alpha_i)) - \frac{1}{2} \alpha^\top Q\alpha$$
$$\text{s.t. } I = \{i,\ 0 &amp;lt; \alpha_i &amp;lt;= C \}$$
$$0 \leq \alpha_i \leq C$$
$$Q_{ij} = y_i x_i^T x_j y_j$$&lt;/p&gt;
&lt;p&gt;Now we got the dual problem, we need to solve a maximization problem.
To do so, we will use in this paper the coordinate ascent method, which consist in optimizing the objective function coordinate by coordinate (or with groups of coordinates).
The SDCA algorithm is described in the next subsection.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;sdca-algorithm&#34;&gt;SDCA algorithm&lt;/h2&gt;
















&lt;figure  id=&#34;figure-sdca-algorithm&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/algorithm.png&#34; alt=&#34;SDCA algorithm.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      SDCA algorithm.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;computation-of-closed-forms&#34;&gt;Computation of closed forms&lt;/h2&gt;
&lt;p&gt;In the studied articles, SDCA is computed either for $L$-Lipschitz loss functions or for $(1/\gamma)$-smooth loss functions.
We recall that a function $\phi_i : \mathbb{R} \rightarrow \mathbb{R}$ is $L$-Lipschitz if $\forall a,b \in \mathbb{R}$, $|\phi_i(a)-\phi_i(b)| \leq L |a-b|$, and that a function $\phi_i : \mathbb{R} \rightarrow \mathbb{R}$ is $(1/\gamma)$-smooth if it is differentiable and its derivative is (1/$\gamma)$-Lipschitz.
Moreover, if $\phi_i$ is $(1/\gamma)$-smooth, then $\phi_i^{*}$ is $\gamma$-strongly convex.
The different loss functions used are described in the table below.
For experimentation, we mainly focused on log loss and square loss.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;algorithm-termination&#34;&gt;Algorithm termination&lt;/h2&gt;
&lt;p&gt;For the sake of simplicity, the studied articles consider the following assumptions: $\forall i, ||x_i|| \leq 1$, $\forall (i,a), \phi_i(a) \geq 0$ and $\forall i, \phi_i(0) \leq 1$.
Under these assumptions, we have the following theorem:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt; Consider Procedure SDCA with $\alpha^{(0)} = 0$.
Assume that $\forall i, \phi_i$ is $L$-Lipschitz (resp. $(1/\gamma)$-smooth).
To obtain an expected duality gap of $\mathbb{E}[P(\overline{w})-D(\overline{\alpha})] \leq \epsilon_P$, it suffices to have a total number of iterations of
$$T \geq n + \max\left(0, \left\lceil n \log \left(\dfrac{\lambda n}{2 L^2} \right) \right\rceil \right) + \dfrac{20 L^2}{\lambda \epsilon_P} \quad \left( \text{resp. } T &amp;gt; \left(n + \dfrac{1}{\lambda \gamma} \right) \log \left[ \dfrac{1}{(T-T_0)\epsilon_P} \left(n + \dfrac{1}{\lambda \gamma} \right) \right] \right)$$&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;experiments&#34;&gt;Experiments&lt;/h1&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;We implemented :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Estimator&lt;/em&gt; objects that can fit, predict and score themselves : logistic loss and square loss&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Optimizer&lt;/em&gt; objects used for fitting : SGD and SDCA&lt;/li&gt;
&lt;li&gt;projections : polynomial and gaussian&lt;/li&gt;
&lt;li&gt;some data utilities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;description-of-the-chosen-data-sets&#34;&gt;Description of the chosen data sets&lt;/h2&gt;
&lt;p&gt;We used our implementation on :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Arrhythmia&lt;/em&gt; : &lt;a href=&#34;https://archive.ics.uci.edu/ml/datasets/Arrhythmia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://archive.ics.uci.edu/ml/datasets/Arrhythmia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Adult&lt;/em&gt; : &lt;a href=&#34;https://archive.ics.uci.edu/ml/datasets/adult&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://archive.ics.uci.edu/ml/datasets/adult&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;some other data sets available on &lt;em&gt;scikit-learn&lt;/em&gt;: &lt;em&gt;Labeled Faced Wild&lt;/em&gt;, &lt;em&gt;Forest covertypes&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the Arrhythmia data set has $452$ instances, which is quite low, it has $279$ features, which is quite high.
On the other hand, the Adult data set has $48,842$ instances but only $14$ features.&lt;/p&gt;
&lt;p&gt;The Arrhythmia data set will help us to check the properties of SDCA when there are high-dimensional features.
The Adult data set will help us to compare the SGD and SDCA when there are a large number of instances.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;use-of-closed-forms-and-numerical-issues&#34;&gt;Use of closed forms and numerical issues&lt;/h2&gt;
&lt;p&gt;In this report, we used the closed form presented above.
The closed form for the logistic regression gave us numerous numerical issues.
On some cases, we can end up with catastrophic cancellations due to either the $\log$ or the $\exp$.&lt;/p&gt;
&lt;p&gt;A solution that is proposed by another study is to optimize a sub-problem with a modified Newton algorithm for each iteration, and thus avoid catastrophic cancellations. We implemented this modified Newton algorithm and tried to use it for the logistic regression on the data sets described above, but of course computation time was incredibly long comparing to the use of closed forms.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;choice-of-algorithm-termination-option&#34;&gt;Choice of algorithm termination option&lt;/h2&gt;
&lt;p&gt;Because of the stochastic behavior of the algorithm, the output is very sensitive to the iteration at which it stops.
Indeed, coefficients vary suddenly, and the convergence is not really monotonous : at some point, it is uncertain whether the loss improves or not.&lt;/p&gt;
&lt;p&gt;There are essentially two ways of taking this into account.
The first method is to stop at a random step, which actually yields good results.
The second method consists in averaging the last $\alpha^{(t)}$ obtained by the algorithm, making sure that the local variations of $\alpha$ are corrected.&lt;/p&gt;
&lt;p&gt;Another way to stop the algorithm is to use the duality gap. However, as this theorem presents a sufficient condition for the total number of iterations, this number is much higher than the real total number of iterations needed to have an acceptable duality gap.&lt;/p&gt;
&lt;p&gt;Considering this analysis, we decided to choose the average output option and to set manually the number of iterations needed for our experimentation. As explained in the studied articles, we can note that this stopping time $T_0$ can be chosen between $1$ to $T$, and is generally chosen equal to $T/2$. However, in practice, these parameters are not required as the duality gap is used to terminate the algorithm.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;choice-of-hyperparameters&#34;&gt;Choice of hyperparameters&lt;/h2&gt;
&lt;p&gt;The SGD has two hyperparameters $c$ and $eps$ while the SDCA has only one hyperparameter $c$.
In order to compare the algorithms, we chose to select the best hyperparameters for each optimizer and for each data set using a validation procedure with a learning set and a validation set.
On every data set, for each hyperparameter, we computed the accuracy after a given number of epochs for a range of values and a certain validation set, and plotted them. We selected the following hyperparameter values :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;SGD $c$&lt;/th&gt;
&lt;th&gt;SGD $eps$&lt;/th&gt;
&lt;th&gt;SDCA $c$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Arrhythmia&lt;/td&gt;
&lt;td&gt;$10^3$&lt;/td&gt;
&lt;td&gt;$10^{-5}$&lt;/td&gt;
&lt;td&gt;$10^{-1}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adults&lt;/td&gt;
&lt;td&gt;$10^4$&lt;/td&gt;
&lt;td&gt;$5 \cdot 10^{-6}$&lt;/td&gt;
&lt;td&gt;$5 \cdot 10^{-2}$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;stopping-time&#34;&gt;Stopping time&lt;/h2&gt;
&lt;p&gt;With such data sets and hyper parameters, we compute the sufficient stopping time for a dual gap lower than $10^{-3}$.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dataset&lt;/th&gt;
&lt;th&gt;Sufficient stopping time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Arrhythmia&lt;/td&gt;
&lt;td&gt;401,549&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Adults&lt;/td&gt;
&lt;td&gt;629,840&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These values perfectly illustrate the explanation about the sufficient stopping time condition described previously. In practice, only some tens of thousands, or even less, are sufficient to have a good convergence.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;comparison-between-sgd-and-sdca-on-used-data-sets&#34;&gt;Comparison between SGD and SDCA on used data sets&lt;/h2&gt;
&lt;p&gt;We fit a logistic regression model on the data sets with the hyper parameters detailed above.
On each data set, we used $85$% of the data for training and $15$% of the data for testing.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;















&lt;figure  id=&#34;figure-evolution-of-the-loss-during-the-learning-for-the-sgd-on-the-arrhythmia-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/arrhythmia_sgd.png&#34; alt=&#34;Evolution of the loss during the learning for the **SGD** on the **Arrhythmia** dataset.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Evolution of the loss during the learning for the &lt;strong&gt;SGD&lt;/strong&gt; on the &lt;strong&gt;Arrhythmia&lt;/strong&gt; dataset.
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;td&gt;















&lt;figure  id=&#34;figure-evolution-of-the-loss-during-the-learning-for-the-sdca-on-the-adults-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/arrhythmia_sdca.png&#34; alt=&#34;Evolution of the loss during the learning for the **SDCA** on the **Adults** dataset.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Evolution of the loss during the learning for the &lt;strong&gt;SDCA&lt;/strong&gt; on the &lt;strong&gt;Adults&lt;/strong&gt; dataset.
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;















&lt;figure  id=&#34;figure-evolution-of-the-loss-during-the-learning-for-the-sgd-on-the-arrhythmia-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/adults_sgd.png&#34; alt=&#34;Evolution of the loss during the learning for the **SGD** on the **Arrhythmia** dataset.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Evolution of the loss during the learning for the &lt;strong&gt;SGD&lt;/strong&gt; on the &lt;strong&gt;Arrhythmia&lt;/strong&gt; dataset.
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;td&gt;















&lt;figure  id=&#34;figure-evolution-of-the-loss-during-the-learning-for-the-sdca-on-the-adults-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/adults_sdca.png&#34; alt=&#34;Evolution of the loss during the learning for the **SDCA** on the **Adults** dataset.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Evolution of the loss during the learning for the &lt;strong&gt;SDCA&lt;/strong&gt; on the &lt;strong&gt;Adults&lt;/strong&gt; dataset.
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can see that after a consequent number of iterations, the accuracy of the estimator trained with the SDCA stops to vary, while the accuracy of the one trained with the SGD continues to vary and reaches better accuracy levels. In practice, it is highly probable that the SDCA gets trapped in a local minimum. Indeed, the structure itself of the algorithm makes it impossible to escape.&lt;/p&gt;
&lt;p&gt;While the SGD can perform slight jumps thanks to the learning rate $eps$, the SDCA only optimizes along one coordinate. If it is trapped into a local minimum, it cannot vary anymore.&lt;/p&gt;
&lt;p&gt;In our experiment, on the one hand the SGD has a better accuracy than the SDCA. On the other hand, the convergence of the SDCA is much clearer.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;















&lt;figure  id=&#34;figure-evolution-of-the-accuracy-during-the-learning-for-the-sgd-and-the-sdca-on-the-arrhythmia-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/arrhythmia.png&#34; alt=&#34;Evolution of the accuracy during the learning for the SGD and the SDCA on the **Arrhythmia** dataset.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Evolution of the accuracy during the learning for the SGD and the SDCA on the &lt;strong&gt;Arrhythmia&lt;/strong&gt; dataset.
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;td&gt;















&lt;figure  id=&#34;figure-evolution-of-the-accuracy-during-the-learning-for-the-sgd-and-the-sdca-on-the-adults-dataset&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://michaelkarpe.github.io/media/sdca/adults.png&#34; alt=&#34;Evolution of the accuracy during the learning for the SGD and the SDCA on the **Adults** dataset.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption data-pre=&#34;Figure&amp;nbsp;&#34; data-post=&#34;:&amp;nbsp;&#34; class=&#34;numbered&#34;&gt;
      Evolution of the accuracy during the learning for the SGD and the SDCA on the &lt;strong&gt;Adults&lt;/strong&gt; dataset.
    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;In this report, we summarized most of what is needed to understand the SDCA : its goal, its theoretical framework and its algorithm.
While our implementation of the SDCA for logistic regression seems to work, it did not yield better performance than SGD for our experiments.&lt;/p&gt;
&lt;p&gt;On the other hand, the SGD can keep fluctuating when the SDCA really converges.
Depending on the problem, it can be a real advantage.
Other tracks need to be investigated in order to improve the performance of the SDCA, such as the resolution of numerical issues for some losses or the use of the SDCA on other data sets.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;p&gt;This article is based on two main studies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Stochastic Dual Coordinate Ascent Methods for Regularized Loss Minimization&lt;/em&gt; (S. Shalev-Shwartz and T. Zhang, 2013) from &lt;em&gt;&lt;a href=&#34;http://www.jmlr.org/papers/volume14/shalev-shwartz13a/shalev-shwartz13a.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.jmlr.org/papers/volume14/shalev-shwartz13a/shalev-shwartz13a.pdf&lt;/a&gt;&lt;/em&gt; was our main interest. This paper compiles many theoretical results on the SDCA and gives a clear algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Dual Coordinate Descent Methods for Logistic Regression and Maximum Entropy Models&lt;/em&gt; (H.-F. Yu, F.-L. Huang, C.-J. Lin, 2011) from &lt;em&gt;&lt;a href=&#34;https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf&lt;/a&gt;&lt;/em&gt; gives interesting insight for the logistic regression case, with a modified Newton method for each iteration step instead of the approximation of the closed form, which helps against the numerical issues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>★ Credit Card Fraud Detection</title>
      <link>https://michaelkarpe.github.io/machine-learning-projects/outlier/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      <guid>https://michaelkarpe.github.io/machine-learning-projects/outlier/</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;brief-description-of-the-project&#34;&gt;Brief description of the project&lt;/h1&gt;
&lt;p&gt;During the Spring semester of my second year at &lt;em&gt;École des Ponts ParisTech&lt;/em&gt; (from February 2018 to May 2018), I worked with three other students on a credit card fraud detection project for &lt;em&gt;Société Générale&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The aim of this project was to realize a comparative study between different outlier detection algorithms to select the one that had the best performances on a credit card fraud dataset. After some research, we decided to focus our study on the following algorithms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Robust Estimator of Covariance&lt;/li&gt;
&lt;li&gt;Local Outlier Factor&lt;/li&gt;
&lt;li&gt;One-class SVM&lt;/li&gt;
&lt;li&gt;Isolation Forest&lt;/li&gt;
&lt;li&gt;Autoencoder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is available on my GitHub but has been left uncleaned.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&#34;related-project&#34;&gt;Related project&lt;/h1&gt;
&lt;p&gt;In June 2019, Robin Teuwens shared a kernel on the famous Kaggle &lt;em&gt;Credit Card Fraud Dataset&lt;/em&gt;, entitled &lt;em&gt;Fraud Detection as a Cost Optimization Problem&lt;/em&gt; (Teuwens changed the name of kernel in August) and proposing &lt;a href=&#34;https://www.kaggle.com/robinteuwens/precision-vs-recall-optimizing-fraud-costs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an approach very similar to ours&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Indeed, the image at the beginning of this article shows profits and costs we had chosen for the cost function we wanted to minimize for the &lt;em&gt;Societe Generale&lt;/em&gt; project, according to the predicted and the real label of a given transaction.&lt;/p&gt;
&lt;p&gt;In November 2019, &lt;a href=&#34;https://www.kaggle.com/mika30/improving-fraud-detection-for-cost-minimization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;I made some changes to Teuwens&amp;rsquo; kernel&lt;/a&gt; to improve his results, switching the logistic regression to gradient boosted trees algorithms and SMOTE oversampling to ADASYN oversampling.&lt;/p&gt;
&lt;p&gt;If I have some time in the next months (but it&amp;rsquo;s unlikely as I switched to new projects), I would like to evaluate the performance of autoencoders on this latest kernel, as we used them for the &lt;em&gt;Societe Generale&lt;/em&gt; project and as Teuwens also proposed &lt;a href=&#34;https://www.kaggle.com/robinteuwens/anomaly-detection-with-auto-encoders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a kernel using autoencoders&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
